version: 2.1

docker_anchor: &docker_node
  docker:
    - image: cimg/node:13.8.0

orbs:

  node: circleci/node@5.0.2
  slack: circleci/slack@4.10.1

commands:
  install-python:
    description: Install python on ubuntu
    steps:
      - run:
          name: Install python3
          command: |
            sudo apt update
            sudo apt install -y python3 python3-pip
  install-aws:
    description: Install aws ubuntu
    steps:
      - run:
          name: Install awscli
          command: |
            sudo apt update
            sudo apt install -y awscli
  install-ansible:
    description: Install ansible and python3 on ubuntu
    steps:
      - restore_cache:
          keys: [pip-ansible]
      - run:
          name: Install ansible
          command: |
            python3 -m pip install --upgrade pip
            python3 -m pip install --user ansible
      - save_cache:
          paths: [/home/circleci/.cache/pip]
          key: pip-ansible
  destroy-envs:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws s3 rb s3://udapeople-<< parameters.workflow_id >>
            aws cloudformation delete-stack \
              --stack-name "udapeople-backendinfra-<< parameters.workflow_id >>"
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontendinfra-<< parameters.workflow_id >>"
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    #parameters:
    # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/2iE8WfdzgLf2FqKXWTkj2C migration_$\{CIRCLE_WORKFLOW_ID:0:7\})
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
      - slack/notify:
          mentions: "@nenbunwe"
          event: fail
          template: basic_fail_1

  build-backend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [backend_deps]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend_deps
      - slack/notify:
          mentions: "@nenbunwe"
          event: fail
          template: basic_fail_1

  test-frontend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: test frontend
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          mentions: "@nenbunwe"
          event: fail
          template: basic_fail_1

  test-backend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [backend_deps]
      - run:
          name: test backend
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          mentions: "@nenbunwe"
          event: fail
          template: basic_fail_1

  scan-frontend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [backend_deps]
      - run:
          name: scan frontend for vunerebility
          command: |
            cd frontend
            npm i --package-lock-only
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          mentions: "@nenbunwe"
          event: fail
          template: basic_fail_1

  scan-backend:
    <<: *docker_node
    steps:
      - checkout
      - restore_cache:
          keys: [backend_deps]
      - run:
          name: scan backend for vunerebility
          command: |
            cd backend
            npm i --package-lock-only
            npm audit fix
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical 
      - slack/notify:
          mentions: "@nenbunwe"
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infra exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backendinfra-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Ensure front-end infra exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontendinfra-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output=text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-envs

  configure-infrastructure:
    <<: *docker_node
    steps:
      - checkout
      - install-python
      - install-ansible
      - install-aws
      - add_ssh_keys:
          fingerprints:
            - "c5:95:b7:9b:1c:99:34:87:c5:7c:f2:2c:37:3e:d9:45"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-envs

  # run-migrations:
  #   <<: *docker_node
  #   steps:
  #     - checkout
  #     - install-python
  #     - install-aws
  #     - restore_cache:
  #         keys: [backend_deps]
  #     - run:
  #         name: Setup .env file
  #         command: |
  #           echo "NODE_ENV=production" >> backend/.env
  #           echo "VERSION=1" >> backend/.env
  #           echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
  #           echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> backend/.env
  #           echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
  #           echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
  #           echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
  #           echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
  #           echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
  #           echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
  #           echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           sudo npm install
  #           sudo npm install -g npm
  #           npm i --package-lock-only
  #           npm audit fix
  #           npm audit fix --audit-level=critical --force
  #           npm audit --audit-level=critical
  #           npm run migrations > migrations_dump.txt
  #     - run:
  #         name: Send migration results to kvdb
  #         command: |
  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then
  #           if grep "has been executed successfully" migrations_log.txt
  #           then 
  #             curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "succeeded" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
  #           else
  #             curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "failed" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
  #           fi
  #     - destroy-envs
# # ========================================================================================================
#   run-migrations:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/
#       - restore_cache:
#           keys: [backend-build]
#       - run:
#           name: Setup .env file
#           command: |
#             echo "NODE_ENV=production" >> backend/.env
#             echo "VERSION=1" >> backend/.env
#             echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
#             echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> backend/.env
#             echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
#             echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
#             echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
#             echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
#             echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
#             echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
#             echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
#       - run:
#           name: Run migrations
#           no_output_timeout: 20m
#           command: |
#             cd backend
#             npm run migrations | tee migrations_log.txt
#       - run:
#           name: Send migration results to memstash
#           command: |
#             cd backend
#             if grep "has been executed successfully" migrations_log.txt
#             then 
#               curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "succeeded" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
#             else
#               curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "failed" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
#             fi
#       - destroy-envs
# ========================================================================================================
  deploy-frontend:
    <<: *docker_node
    steps:
      - checkout
      - install-python
      - install-aws
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output=text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations
      - destroy-envs

  deploy-backend:
    <<: *docker_node
    steps:
      - checkout
      - install-python
      - install-ansible
      - install-aws
      - add_ssh_keys:
          fingerprints:
            - "c5:95:b7:9b:1c:99:34:87:c5:7c:f2:2c:37:3e:d9:45"
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend_deps]
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-envs

      # Here's where you will add some code to rollback on failure

  smoke-test:
    <<: *docker_node
    steps:
      - checkout
      - install-python
      - install-aws
      - run:
          name: Get backend url and smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output=text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            sleep 30s
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              exit 0
            else
              exit 0
            fi
      - revert-migrations
      - destroy-envs
      # Here's where you will add some code to rollback on failure

  cloudfront-update:
    <<: *docker_node
    steps:
      - checkout
      - install-python
      - install-aws
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            echo "${STACKS[@]}" > stacks.txt
            echo ${OldWorkflowID} > old_workflow.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/old_workflow.txt
            - project/stacks.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-envs

  cleanup:
    <<: *docker_node
    steps:
      - checkout
      - install-python
      - install-aws
      - attach_workspace:
          at: ~/
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat old_workflow.txt)
            export STACKS=$(cat stacks.txt)
            echo Stack names: "${STACKS}"
            echo OldWorkflowID: "${OldWorkflowID}"
            if [[ ${STACKS} =~ ${OldWorkflowID} ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backendinfra-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontendinfra-${OldWorkflowID}"
            else
              echo "cannot delete old stacks"
            fi
      - revert-migrations
      - destroy-envs
  deploy:
    executor:
      name: node/default
    steps:
      - checkout
      - node/install-packages
      - run:
          command: npm run deploy
      - slack/notify:
          channel: A04129UBS1E
          event: fail
          template: basic_fail_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-frontend:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [configure-infrastructure]
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      # - deploy:
      #    context: slack-secret many

